import re

def evaluate_password(password):
    """Evaluates password strength with detailed feedback."""
    feedback = {
        'score': 0,
        'strength': 'Very Weak',
        'issues': [],
        'suggestions': [],
        'is_acceptable': False
    }
    
    if not password:
        feedback['issues']
        return feedback
    length = len(password)
    if length < 8:
        feedback['issues']
    elif length < 12:
        feedback['suggestions']
    else:
        feedback['score'] += 2
    has_lower = re.search(r'[a-z]', password)
    has_upper = re.search(r'[A-Z]', password)
    has_digit = re.search(r'[0-9]', password)
    special_chars = r'[^a-zA-Z0-9\s]'
    has_special = re.search(special_chars, password)
    common_special = set('!@#$%^&*()_+-=[]{}|;:,.<>?')
    used_special = set(re.findall(special_chars, password))
    
    if not has_lower:
        feedback['issues']
    if not has_upper:
        feedback['suggestions']
    if not has_digit:
        feedback['suggestions']

    if not has_special:
        feedback['suggestions']
        feedback['suggestions']
    
    weak_patterns = [
        '123', 'abc',
    ]
    
    lower_pass = password.lower()
    if any(pattern in lower_pass for pattern in weak_patterns):
        feedback['issues']
        feedback['score'] -= 1
    
    
    if re.search(r'(.)\1{2,}', password):
        feedback['issues']
    if re.search(r'(123|234|345|456|abc|bcd|cde|def)', lower_pass):
        feedback['issues']

    feedback['score'] += sum([1 for x in [has_lower, has_upper, has_digit, has_special] if x])

    if feedback['score'] >= 5 and length >= 12 and all([has_lower, has_upper, has_digit, has_special]):
        feedback['strength'] = "Very Strong!"
        feedback['is_acceptable'] = True
    elif feedback['score'] >= 5:
        feedback['strength'] = "Strong"
        feedback['is_acceptable'] = True
    elif feedback['score'] >= 3:
        feedback['strength'] = "Okay"
    else:
        feedback['strength'] = "Weak"
    
    return feedback

def explain_results(results):
    """Prints detailed password analysis"""
    print("\n Password Analysis ")
    print(f"Overall Strength: {results['strength']} ({results['score']}/5)")
    
    if results['issues']:
        print("\nðŸš¨ Security Issues:")
        for issue in results['issues']:
            print(f"- {issue}")
    
    if results['suggestions']:
        print("\nðŸ’¡ Recommendations:")
        for suggestion in results['suggestions']:
            print(f"- {suggestion}")
    
    if results['is_acceptable']:
        print("\n This password meets basic security requirements")
    else:
        print("\n Consider improving this password before use")

if __name__ == "__main__":
    print("ðŸ”’ Password Strength Checker")
    print("Type 'quit' to exit\n")
    
    while True:
        try:
            user_input = input("Enter password to evaluate: ").strip()
            
            if user_input.lower() in ('quit', 'exit'):
                print("Stay secure! Goodbye.")
                break
                
            results = evaluate_password(user_input)
            explain_results(results)
            
        except KeyboardInterrupt:
            print("\nExiting...")
            break
